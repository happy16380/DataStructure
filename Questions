Problem 1.  Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

Solution:
 class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> m = new HashMap<>();
        int[] result = new int[2];
        // for(int i = 0; i< nums.length ; i++){
        //     m.put(nums[i],i);
        // }
        for(int i = 0; i< nums.length ; i++){
            int temp = target - nums[i];
            if(m.containsKey(temp)){
                result[0] = i;
                result[1] = m.get(temp);

            }
            else{
                m.put(nums[i],i);
            }
        }
        return result;
    }
}

Problem 2. Given an array arr of size n and an integer X. Find if there's a triplet in the array which sums up to the given integer X.

Solution:  class Solution
{
    //Function to find if there exists a triplet in the 
    //array A[] which sums up to X.
    public static boolean find3Numbers(int nums[], int n, int X) { 
    
       // Your code Here
         Arrays.sort(nums);  
         for(int i = 0 ;i<n;i++){
             int temp = X- nums[i];
            
                 int left = i+1;
                 int right = n-1;
                 while(left < right){
                     int temps = nums[left] + nums[right];
                     if(temps > temp){
                         right--;
                     }
                     else if(temps < temp){
                         left++;
                     }
                     else{
                         return true;
                     }
                 }
             
         }
       
        return false;
    }
    
    
}


Problem 3. Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.

Solution: class Solution {
    public int longestMountain(int[] arr) {
        int n = arr.length;
        int result = 0;
        int temp = 0;
        int top = 0;
        if(n<3){
            return 0;
        }
        for(int i = 1; i<= n-2;){
            
            if( arr[i] > arr[i-1] && arr[i] > arr[i+1]){
                top = i;
                temp = 1;
                while(top >= 1 && arr[top] > arr[top-1]){
                   temp++;
                   top--;
                }
            
            while(i<= n-2 && arr[i] > arr[i+1]){
                   temp++;
                   i++;
                }
            result = Math.max(temp,result);
            }
            else{i++;}
            

        }
        return result;
    }
}

Problem 4. Given an array of positive integers. Find the length of the longest sub-sequence such that elements in the subsequence are consecutive integers, the consecutive numbers can be in any order.

Solution: class Solution
{   
    // arr[] : the input array
    // N : size of the array arr[]
    
    //Function to return length of longest subsequence of consecutive integers.
	static int findLongestConseqSubseq(int arr[], int N)
	{
	   // add your code here
	   TreeSet<Integer> n = new TreeSet<>();
	   int result = 0;
	   for(int i = 0; i< N;i++){
	       n.add(arr[i]);
	   }
	   for(int i = 0; i< N;i++){
	       int temp = arr[i] -1;
	       if(!n.contains(temp)){
	           int cnt = 0;
	           temp = temp +1;
	           while(n.contains(temp)){
	               cnt++;
	               temp++;
	           }
	           result = Math.max(cnt,result);
	       }
	   }
	   return result;
	}
}

Problem 5: Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.

Solution: class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int n = nums.length;
        int result = 0;
        int start = 0;
        int end = -1;
        int max = nums[0];
        int min = nums[n-1];
       


        for(int i = 1;i<n;i++){

            if(nums[i] < max){
                end = i;
            }
            else{
                max = nums[i];
            }
            
        }
        //System.out.println(start);
        for(int i = n-2;i>=0;i--){

            if(nums[i] > min ){
                start = i;
                
            }
            else{
                min = nums[i];
            }
            
        }
        // System.out.println(end);
        result = end - start + 1;
        
        return result;
    }
}

Problem 6. Given an integer array nums, find the subarray with the largest sum, and return its sum.

Solution: class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;
        int maxSum = Integer.MIN_VALUE;
        int currSum = 0;

        for (int i = 0; i <= n - 1; i++) {
            currSum += nums[i];

            if (currSum > maxSum) {
            maxSum = currSum;
            }

            if (currSum < 0) {
            currSum = 0;
            }
        }

        return maxSum;
    }
}

Problem 7. Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

Solution: class Solution {
    public int[] productExceptSelf(int[] nums) {
       int product = 1;
       int zeroProduct = 1;
       int n = nums.length;
       int count = 0;
       int[] result = new int[n];
       for(int i = 0;i < n;i++){
           product = product*nums[i];
           if(nums[i] == 0){
               count++;
           }
       } 
       if(product == 0){
           boolean flag = true;
          for(int i = 0;i < n;i++){
              
              if(nums[i] != 0){
                  zeroProduct = zeroProduct*nums[i];
                  flag = false;
              }

            
          }
          if(flag == true){
              zeroProduct = 0;
          }

       }
       if(count > 1){
           zeroProduct = 0;
       }
       for(int i = 0;i < n;i++){
           if(nums[i] != 0){
               result[i] = product/nums[i];
           }
           else{
               result[i] = zeroProduct;
           }
           
       } 
       return result;
    }
}
