Problem 1.  Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

Solution:
 class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> m = new HashMap<>();
        int[] result = new int[2];
        // for(int i = 0; i< nums.length ; i++){
        //     m.put(nums[i],i);
        // }
        for(int i = 0; i< nums.length ; i++){
            int temp = target - nums[i];
            if(m.containsKey(temp)){
                result[0] = i;
                result[1] = m.get(temp);

            }
            else{
                m.put(nums[i],i);
            }
        }
        return result;
    }
}

Problem 2. Given an array arr of size n and an integer X. Find if there's a triplet in the array which sums up to the given integer X.

Solution:  class Solution
{
    //Function to find if there exists a triplet in the 
    //array A[] which sums up to X.
    public static boolean find3Numbers(int nums[], int n, int X) { 
    
       // Your code Here
         Arrays.sort(nums);  
         for(int i = 0 ;i<n;i++){
             int temp = X- nums[i];
            
                 int left = i+1;
                 int right = n-1;
                 while(left < right){
                     int temps = nums[left] + nums[right];
                     if(temps > temp){
                         right--;
                     }
                     else if(temps < temp){
                         left++;
                     }
                     else{
                         return true;
                     }
                 }
             
         }
       
        return false;
    }
    
    
}


Problem 3. Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.

Solution: class Solution {
    public int longestMountain(int[] arr) {
        int n = arr.length;
        int result = 0;
        int temp = 0;
        int top = 0;
        if(n<3){
            return 0;
        }
        for(int i = 1; i<= n-2;){
            
            if( arr[i] > arr[i-1] && arr[i] > arr[i+1]){
                top = i;
                temp = 1;
                while(top >= 1 && arr[top] > arr[top-1]){
                   temp++;
                   top--;
                }
            
            while(i<= n-2 && arr[i] > arr[i+1]){
                   temp++;
                   i++;
                }
            result = Math.max(temp,result);
            }
            else{i++;}
            

        }
        return result;
    }
}

Problem 4. Given an array of positive integers. Find the length of the longest sub-sequence such that elements in the subsequence are consecutive integers, the consecutive numbers can be in any order.

Solution: class Solution
{   
    // arr[] : the input array
    // N : size of the array arr[]
    
    //Function to return length of longest subsequence of consecutive integers.
	static int findLongestConseqSubseq(int arr[], int N)
	{
	   // add your code here
	   TreeSet<Integer> n = new TreeSet<>();
	   int result = 0;
	   for(int i = 0; i< N;i++){
	       n.add(arr[i]);
	   }
	   for(int i = 0; i< N;i++){
	       int temp = arr[i] -1;
	       if(!n.contains(temp)){
	           int cnt = 0;
	           temp = temp +1;
	           while(n.contains(temp)){
	               cnt++;
	               temp++;
	           }
	           result = Math.max(cnt,result);
	       }
	   }
	   return result;
	}
}
