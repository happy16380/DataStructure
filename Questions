Problem 1.  Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

Solution:
 class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> m = new HashMap<>();
        int[] result = new int[2];
        // for(int i = 0; i< nums.length ; i++){
        //     m.put(nums[i],i);
        // }
        for(int i = 0; i< nums.length ; i++){
            int temp = target - nums[i];
            if(m.containsKey(temp)){
                result[0] = i;
                result[1] = m.get(temp);

            }
            else{
                m.put(nums[i],i);
            }
        }
        return result;
    }
}

Problem 2. Given an array arr of size n and an integer X. Find if there's a triplet in the array which sums up to the given integer X.

Solution:  class Solution
{
    //Function to find if there exists a triplet in the 
    //array A[] which sums up to X.
    public static boolean find3Numbers(int nums[], int n, int X) { 
    
       // Your code Here
         Arrays.sort(nums);  
         for(int i = 0 ;i<n;i++){
             int temp = X- nums[i];
            
                 int left = i+1;
                 int right = n-1;
                 while(left < right){
                     int temps = nums[left] + nums[right];
                     if(temps > temp){
                         right--;
                     }
                     else if(temps < temp){
                         left++;
                     }
                     else{
                         return true;
                     }
                 }
             
         }
       
        return false;
    }
    
    
}
